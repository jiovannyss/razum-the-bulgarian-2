import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.53.0';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface ApiCompetition {
  id: number;
  name: string;
  code: string;
  type: string; // –ù–û–íO: LEAGUE, CUP, etc.
  area: {
    name: string;
    code: string;
  };
  emblem: string;
  currentSeason?: {
    currentMatchday: number;
  };
  plan: string;
}

interface ApiTeam {
  id: number;
  name: string;
  shortName: string;
  tla: string;
  crest: string;
  address?: string;
  website?: string;
  founded?: number;
  clubColors?: string;
  venue?: string;
  coach?: { // –ù–û–í–û
    name: string;
    nationality: string;
  };
  leagueRank?: number; // –ù–û–í–û
}

interface ApiStanding {
  position: number;
  team: ApiTeam;
  playedGames: number;
  won: number;
  draw: number;
  lost: number;
  points: number;
  goalsFor: number;
  goalsAgainst: number;
  goalDifference: number;
  form?: string;
}

interface ApiMatch {
  id: number;
  competition: {
    id: number;
  };
  season?: {
    id: number;
  };
  matchday: number;
  stage: string;
  group?: string;
  homeTeam: ApiTeam;
  awayTeam: ApiTeam;
  utcDate: string;
  status: string;
  minute?: number; // –ù–û–í–û
  injuryTime?: number; // –ù–û–í–û
  attendance?: number; // –ù–û–í–û
  score: {
    winner?: string;
    duration?: string;
    fullTime: {
      home?: number;
      away?: number;
    };
  };
  venue?: string;
  referees?: Array<{ name: string; }>;
}

serve(async (req) => {
  console.log('üöÄ Football Data Sync function started');

  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ Supabase –∫–ª–∏–µ–Ω—Ç
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const footballApiKey = Deno.env.get('FOOTBALL_API_KEY');

    if (!footballApiKey) {
      throw new Error('FOOTBALL_API_KEY –Ω–µ –µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω');
    }

    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    // –ü–∞—Ä—Å–∏—Ä–∞–Ω–µ –Ω–∞ –∑–∞—è–≤–∫–∞—Ç–∞
    const { syncType = 'all', competitionIds } = await req.json().catch(() => ({}));

    console.log(`üìä –ó–∞–ø–æ—á–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–∏–ø: ${syncType}`);

    // –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ sync log –∑–∞–ø–∏—Å
    const { data: syncLog, error: syncLogError } = await supabase
      .from('sync_logs')
      .insert({
        sync_type: syncType,
        status: 'running'
      })
      .select()
      .single();

    if (syncLogError) {
      console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ sync log:', syncLogError);
      throw syncLogError;
    }

    let syncLogId = syncLog.id;
    let totalProcessed = 0;

    // Helper —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ API –∑–∞—è–≤–∫–∏ —Å —É–≤–µ–ª–∏—á–µ–Ω rate limiting
    let lastRequestTime = 0;
    const RATE_LIMIT_DELAY = 7000; // 7 —Å–µ–∫—É–Ω–¥–∏ –º–µ–∂–¥—É –∑–∞—è–≤–∫–∏ (–±–µ–∑–ø–ª–∞—Ç–µ–Ω –ø–ª–∞–Ω = 10/–º–∏–Ω—É—Ç–∞)
    
    const makeApiRequest = async (endpoint: string) => {
      // Rate limiting - —á–∞–∫–∞–º–µ –º–µ–∂–¥—É –∑–∞—è–≤–∫–∏—Ç–µ
      const now = Date.now();
      const timeSinceLastRequest = now - lastRequestTime;
      if (timeSinceLastRequest < RATE_LIMIT_DELAY) {
        const waitTime = RATE_LIMIT_DELAY - timeSinceLastRequest;
        console.log(`‚è≥ –ß–∞–∫–∞–º–µ ${waitTime}ms –ø—Ä–µ–¥–∏ —Å–ª–µ–¥–≤–∞—â–∞ –∑–∞—è–≤–∫–∞...`);
        await new Promise(resolve => setTimeout(resolve, waitTime));
      }
      
      console.log(`üåê API –∑–∞—è–≤–∫–∞: ${endpoint}`);
      const response = await fetch(`https://api.football-data.org/v4${endpoint}`, {
        headers: {
          'X-Auth-Token': footballApiKey
        }
      });

      lastRequestTime = Date.now();

      if (!response.ok) {
        if (response.status === 429) {
          // Rate limit hit - —á–∞–∫–∞–º–µ –ø–æ–≤–µ—á–µ –∏ –ø—Ä–æ–±–≤–∞–º–µ –æ—Ç–Ω–æ–≤–æ
          console.log('üö´ Rate limit –¥–æ—Å—Ç–∏–≥–Ω–∞—Ç, —á–∞–∫–∞–º–µ 60 —Å–µ–∫—É–Ω–¥–∏...');
          await new Promise(resolve => setTimeout(resolve, 60000));
          return makeApiRequest(endpoint); // –û–ø–∏—Ç–≤–∞–º–µ –æ—Ç–Ω–æ–≤–æ
        }
        throw new Error(`API –≥—Ä–µ—à–∫–∞ ${response.status}: ${response.statusText}`);
      }

      return response.json();
    };

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä–∏
    const syncCompetitions = async () => {
      console.log('üèÜ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä–∏...');
      const data = await makeApiRequest('/competitions');
      const competitions: ApiCompetition[] = data.competitions;
      console.log(`üîç –û–±—â–æ ${competitions.length} —Ç—É—Ä–Ω–∏—Ä–∞ –æ—Ç API:`, competitions.map(c => `${c.name} (${c.code}) - ${c.plan}`));

      for (const comp of competitions) {
        await supabase
          .from('cached_competitions')
          .upsert({
            id: comp.id,
            name: comp.name,
            code: comp.code,
            type: comp.type, // –ù–û–í–û
            area_name: comp.area.name,
            area_code: comp.area.code,
            emblem_url: comp.emblem,
            current_matchday: comp.currentSeason?.currentMatchday || null,
            plan: comp.plan,
            last_updated: new Date().toISOString()
          });
        totalProcessed++;
      }

      console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–Ω–∏ ${competitions.length} —Ç—É—Ä–Ω–∏—Ä–∞`);
      return competitions.map(c => c.id);
    };

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Ç–±–æ—Ä–∏ –∑–∞ –¥–∞–¥–µ–Ω —Ç—É—Ä–Ω–∏—Ä
    const syncTeamsForCompetition = async (competitionId: number) => {
      console.log(`üë• –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –æ—Ç–±–æ—Ä–∏ –∑–∞ —Ç—É—Ä–Ω–∏—Ä ${competitionId}...`);
      try {
        const data = await makeApiRequest(`/competitions/${competitionId}/teams`);
        const teams: ApiTeam[] = data.teams || [];

        for (const team of teams) {
          await supabase
            .from('cached_teams')
            .upsert({
              id: team.id,
              name: team.name,
              short_name: team.shortName,
              tla: team.tla,
              crest_url: team.crest,
              address: team.address,
              website: team.website,
              founded: team.founded,
              club_colors: team.clubColors,
              venue: team.venue,
              coach_name: team.coach?.name, // –ù–û–í–û
              coach_nationality: team.coach?.nationality, // –ù–û–í–û
              league_rank: team.leagueRank, // –ù–û–í–û
              last_updated: new Date().toISOString()
            });
          totalProcessed++;
        }

        console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–Ω–∏ ${teams.length} –æ—Ç–±–æ—Ä–∞ –∑–∞ —Ç—É—Ä–Ω–∏—Ä ${competitionId}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ù–µ –º–æ–∂–∞—Ö –¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–º –æ—Ç–±–æ—Ä–∏—Ç–µ –∑–∞ —Ç—É—Ä–Ω–∏—Ä ${competitionId}:`, error);
      }
    };

    // Helper —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –∏–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ —Ñ–æ—Ä–º–∞ –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏ –º–∞—á–æ–≤–µ
    const calculateTeamForm = async (teamId: number, limit: number = 5): Promise<string> => {
      try {
        console.log(`üîç –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ —Ñ–æ—Ä–º–∞ –∑–∞ –æ—Ç–±–æ—Ä ${teamId}...`);
        const matchesData = await makeApiRequest(`/teams/${teamId}/matches?limit=${limit}&status=FINISHED`);
        
        if (!matchesData.matches || matchesData.matches.length === 0) {
          console.log(`‚ö†Ô∏è –ù—è–º–∞ –º–∞—á–æ–≤–µ –∑–∞ –æ—Ç–±–æ—Ä ${teamId}`);
          return '';
        }

        const form = [];
        
        for (const match of matchesData.matches.slice(0, limit)) {
          const isHome = match.homeTeam.id === teamId;
          
          let result;
          if (match.score.winner === 'DRAW') {
            result = 'D';
          } else if (
            (isHome && match.score.winner === 'HOME_TEAM') ||
            (!isHome && match.score.winner === 'AWAY_TEAM')
          ) {
            result = 'W';
          } else {
            result = 'L';
          }
          
          form.push(result);
        }
        
        const formString = form.join('');
        console.log(`‚úÖ –û—Ç–±–æ—Ä ${teamId}: —Ñ–æ—Ä–º–∞ = "${formString}"`);
        return formString;
      } catch (error) {
        console.error(`‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ —Ñ–æ—Ä–º–∞ –∑–∞ –æ—Ç–±–æ—Ä ${teamId}:`, error);
        return '';
      }
    };

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞ –∫–ª–∞—Å–∏—Ä–∞–Ω–∏—è –∑–∞ –¥–∞–¥–µ–Ω —Ç—É—Ä–Ω–∏—Ä
    const syncStandingsForCompetition = async (competitionId: number) => {
      console.log(`üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –∫–ª–∞—Å–∏—Ä–∞–Ω–∏—è –∑–∞ —Ç—É—Ä–Ω–∏—Ä ${competitionId}...`);
      try {
        const data = await makeApiRequest(`/competitions/${competitionId}/standings`);
        
        console.log(`üîç Debug: –ó–∞ —Ç—É—Ä–Ω–∏—Ä ${competitionId} –ø–æ–ª—É—á–∏—Ö–º–µ ${data.standings?.length || 0} standings tables`);
        
        // –õ–æ–≥–≤–∞–º–µ –≤—Å–∏—á–∫–∏ standings types
        if (data.standings) {
          data.standings.forEach((standing: any, index: number) => {
            console.log(`  Table ${index}: type="${standing.type}", stage="${standing.stage}", entries=${standing.table?.length || 0}`);
          });
        }
        
        // –¢—ä—Ä—Å–∏–º TOTAL standings table (–Ω–µ HOME/AWAY), –∑–∞—â–æ—Ç–æ —Å–∞–º–æ —Ç–∞–º –∏–º–∞ form –¥–∞–Ω–Ω–∏
        const totalStanding = data.standings?.find((s: any) => 
          s.type === 'TOTAL' || !s.type || s.stage === 'REGULAR_SEASON'
        );
        
        console.log(`üéØ –ò–∑–±—Ä–∞—Ö–º–µ standing: type="${totalStanding?.type}", table entries=${totalStanding?.table?.length || 0}`);
        
        const standings: ApiStanding[] = totalStanding?.table || [];

        // –ü—ä—Ä–≤–æ –∏–∑—Ç—Ä–∏–≤–∞–º–µ —Å—Ç–∞—Ä–∏—Ç–µ –∑–∞–ø–∏—Å–∏ –∑–∞ —Ç–æ–∑–∏ —Ç—É—Ä–Ω–∏—Ä
        await supabase
          .from('cached_standings')
          .delete()
          .eq('competition_id', competitionId);

        // –û–±—Ä–∞–±–æ—Ç–≤–∞–º–µ –≤—Å–µ–∫–∏ –æ—Ç–±–æ—Ä –∏ –∏–∑—á–∏—Å–ª—è–≤–∞–º–µ —Ñ–æ—Ä–º–∞—Ç–∞ –º—É
        const standingsToInsert = [];
        
        for (const standing of standings) {
          console.log(`üîç –û–±—Ä–∞–±–æ—Ç–≤–∞–Ω–µ –Ω–∞ ${standing.team?.name} (ID: ${standing.team?.id})...`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ team.id —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
          if (!standing.team?.id) {
            console.warn(`‚ö†Ô∏è Missing team_id for team: ${standing.team?.name}`);
            continue;
          }
          
          // –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏ –º–∞—á–æ–≤–µ
          const calculatedForm = await calculateTeamForm(standing.team.id);
          
          standingsToInsert.push({
            competition_id: competitionId,
            team_id: standing.team.id,
            position: standing.position,
            played_games: standing.playedGames,
            won: standing.won,
            draw: standing.draw,
            lost: standing.lost,
            points: standing.points,
            goals_for: standing.goalsFor,
            goals_against: standing.goalsAgainst,
            goal_difference: standing.goalDifference,
            form: calculatedForm || null,
            last_updated: new Date().toISOString()
          });
          
          // –£–≤–µ–ª–∏—á–µ–Ω–∞ –ø–∞—É–∑–∞ –∑–∞ –¥–∞ –Ω–µ –Ω–∞—Ç–æ–≤–∞—Ä–≤–∞–º–µ API-—Ç–æ
          await new Promise(resolve => setTimeout(resolve, 2000)); // 2 —Å–µ–∫—É–Ω–¥–∏ –º–µ–∂–¥—É –æ—Ç–±–æ—Ä–∏—Ç–µ
        }

        // –ó–∞–ø–∏—Å–≤–∞–º–µ –≤—Å–∏—á–∫–∏ –Ω–∞–≤–µ–¥–Ω—ä–∂
        if (standingsToInsert.length > 0) {
          await supabase
            .from('cached_standings')
            .insert(standingsToInsert);
          
          totalProcessed += standingsToInsert.length;
        }

        console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–Ω–∏ ${standingsToInsert.length} –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–ª–∞—Å–∏—Ä–∞–Ω–µ—Ç–æ –∑–∞ —Ç—É—Ä–Ω–∏—Ä ${competitionId} —Å –∏–∑—á–∏—Å–ª–µ–Ω–∞ —Ñ–æ—Ä–º–∞`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ù–µ –º–æ–∂–∞—Ö –¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–º –∫–ª–∞—Å–∏—Ä–∞–Ω–µ—Ç–æ –∑–∞ —Ç—É—Ä–Ω–∏—Ä ${competitionId}:`, error);
      }
    };

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞ –º–∞—á–æ–≤–µ –∑–∞ –¥–∞–¥–µ–Ω —Ç—É—Ä–Ω–∏—Ä
    const syncFixturesForCompetition = async (competitionId: number) => {
      console.log(`‚öΩ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –º–∞—á–æ–≤–µ –∑–∞ —Ç—É—Ä–Ω–∏—Ä ${competitionId}...`);
      try {
        const data = await makeApiRequest(`/competitions/${competitionId}/matches`);
        const matches: ApiMatch[] = data.matches || [];

        for (const match of matches) {
          await supabase
            .from('cached_fixtures')
            .upsert({
              id: match.id,
              competition_id: match.competition.id,
              season_id: match.season?.id,
              matchday: match.matchday,
              stage: match.stage,
              group_name: match.group,
              home_team_id: match.homeTeam.id,
              away_team_id: match.awayTeam.id,
              utc_date: match.utcDate,
              status: match.status,
              minute: match.minute, // –ù–û–í–û
              injury_time: match.injuryTime, // –ù–û–í–û
              attendance: match.attendance, // –ù–û–í–û
              home_score: match.score.fullTime.home,
              away_score: match.score.fullTime.away,
              winner: match.score.winner,
              duration: match.score.duration,
              venue: match.venue,
              referee: match.referees?.[0]?.name,
              last_updated: new Date().toISOString()
            });
          totalProcessed++;
        }

        console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–Ω–∏ ${matches.length} –º–∞—á–∞ –∑–∞ —Ç—É—Ä–Ω–∏—Ä ${competitionId}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ù–µ –º–æ–∂–∞—Ö –¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–º –º–∞—á–æ–≤–µ—Ç–µ –∑–∞ —Ç—É—Ä–Ω–∏—Ä ${competitionId}:`, error);
      }
    };

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞ H2H –º–∞—á–æ–≤–µ
    const syncH2HMatches = async () => {
      console.log(`ü§ù –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ H2H –º–∞—á–æ–≤–µ...`);
      
      try {
        // –í–∑–µ–º–∞–º–µ –≤—Å–∏—á–∫–∏ –æ—Ç–±–æ—Ä–∏ –æ—Ç –∫–µ—à–∞
        const { data: teams, error: teamsError } = await supabase
          .from('cached_teams')
          .select('id')
          .limit(1000);
        
        if (teamsError || !teams) {
          console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –æ—Ç–±–æ—Ä–∏:', teamsError);
          return;
        }

        console.log(`üîç –©–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–º H2H –∑–∞ ${teams.length} –æ—Ç–±–æ—Ä–∞...`);
        
        let processedPairs = 0;
        const currentYear = new Date().getFullYear();
        const previousSeasons = Array.from({length: 10}, (_, i) => currentYear - 1 - i);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä–∞–º–µ –≤—Å–∏—á–∫–∏ –≤—ä–∑–º–æ–∂–Ω–∏ –¥–≤–æ–π–∫–∏ –æ—Ç–±–æ—Ä–∏
        for (let i = 0; i < teams.length; i++) {
          for (let j = i + 1; j < teams.length; j++) {
            const team1Id = teams[i].id;
            const team2Id = teams[j].id;
            
            console.log(`üîç H2H: ${team1Id} vs ${team2Id} (${processedPairs + 1}/${(teams.length * (teams.length - 1)) / 2})`);
            
            let h2hMatches: any[] = [];
            
            // –¢—ä—Ä—Å–∏–º H2H –º–∞—á–æ–≤–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 10 –≥–æ–¥–∏–Ω–∏
            for (const seasonYear of previousSeasons) {
              try {
                const data = await makeApiRequest(`/teams/${team1Id}/matches?season=${seasonYear}&status=FINISHED`);
                
                if (data.matches) {
                  const h2hInSeason = data.matches.filter((match: ApiMatch) => 
                    (match.homeTeam.id === team1Id && match.awayTeam.id === team2Id) ||
                    (match.homeTeam.id === team2Id && match.awayTeam.id === team1Id)
                  );
                  
                  h2hMatches.push(...h2hInSeason);
                }
                
                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞—è–≤–∫–∏—Ç–µ –∑–∞ —Å–µ–∑–æ–Ω–∏
                await new Promise(resolve => setTimeout(resolve, 1000));
              } catch (seasonError) {
                console.log(`‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ç—ä—Ä—Å–µ–Ω–µ –Ω–∞ H2H –∑–∞ —Å–µ–∑–æ–Ω ${seasonYear}:`, seasonError);
                continue;
              }
            }
            
            // –ó–∞–ø–∏—Å–≤–∞–º–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—Ç–µ H2H –º–∞—á–æ–≤–µ
            for (const match of h2hMatches) {
              const minTeamId = Math.min(team1Id, team2Id);
              const maxTeamId = Math.max(team1Id, team2Id);
              
              await supabase
                .from('cached_h2h_matches')
                .upsert({
                  team1_id: minTeamId,
                  team2_id: maxTeamId,
                  match_id: match.id,
                  competition_id: match.competition.id,
                  season_year: new Date(match.utcDate).getFullYear(),
                  utc_date: match.utcDate,
                  home_team_id: match.homeTeam.id,
                  away_team_id: match.awayTeam.id,
                  home_score: match.score.fullTime.home,
                  away_score: match.score.fullTime.away,
                  status: match.status,
                  winner: match.score.winner,
                  venue: match.venue,
                  last_updated: new Date().toISOString()
                });
              
              totalProcessed++;
            }
            
            processedPairs++;
            console.log(`‚úÖ H2H ${team1Id} vs ${team2Id}: ${h2hMatches.length} –º–∞—á–∞`);
            
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –¥–≤–æ–π–∫–∏—Ç–µ –æ—Ç–±–æ—Ä–∏
            await new Promise(resolve => setTimeout(resolve, 2000));
          }
        }
        
        console.log(`‚úÖ H2H —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤—ä—Ä—à–µ–Ω–∞: ${processedPairs} –¥–≤–æ–π–∫–∏ –æ—Ç–±–æ—Ä–∏`);
      } catch (error) {
        console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ H2H —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:', error);
      }
    };

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞ —Ñ–æ—Ä–º–∞ –Ω–∞ –æ—Ç–±–æ—Ä–∏—Ç–µ
    const syncTeamForm = async () => {
      console.log(`üìà –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ —Ñ–æ—Ä–º–∞ –Ω–∞ –æ—Ç–±–æ—Ä–∏—Ç–µ...`);
      
      try {
        // –í–∑–µ–º–∞–º–µ –≤—Å–∏—á–∫–∏ –æ—Ç–±–æ—Ä–∏ –æ—Ç –∫–µ—à–∞
        const { data: teams, error: teamsError } = await supabase
          .from('cached_teams')
          .select('id')
          .limit(1000);
        
        if (teamsError || !teams) {
          console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –æ—Ç–±–æ—Ä–∏:', teamsError);
          return;
        }

        console.log(`üîç –©–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–º —Ñ–æ—Ä–º–∞ –∑–∞ ${teams.length} –æ—Ç–±–æ—Ä–∞...`);
        
        for (const team of teams) {
          try {
            console.log(`üìä –§–æ—Ä–º–∞ –∑–∞ –æ—Ç–±–æ—Ä ${team.id}...`);
            
            // –í–∑–µ–º–∞–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 5 –º–∞—á–∞ –Ω–∞ –æ—Ç–±–æ—Ä–∞
            const data = await makeApiRequest(`/teams/${team.id}/matches?limit=5&status=FINISHED`);
            
            const matches = data.matches || [];
            
            // –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ (W/D/L)
            const formResults = [];
            for (let i = 0; i < 5; i++) {
              if (i < matches.length) {
                const match = matches[i];
                const isHome = match.homeTeam.id === team.id;
                
                let result = '';
                if (match.score.winner === 'DRAW') {
                  result = 'D';
                } else if (
                  (isHome && match.score.winner === 'HOME_TEAM') ||
                  (!isHome && match.score.winner === 'AWAY_TEAM')
                ) {
                  result = 'W';
                } else {
                  result = 'L';
                }
                formResults.push(result);
              } else {
                formResults.push(null);
              }
            }
            
            // –ó–∞–ø–∏—Å–≤–∞–º–µ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞
            await supabase
              .from('cached_team_form')
              .upsert({
                team_id: team.id,
                match1_result: formResults[0], // –Ω–∞–π-—Å–∫–æ—Ä–æ—à–µ–Ω –º–∞—á
                match2_result: formResults[1],
                match3_result: formResults[2],
                match4_result: formResults[3],
                match5_result: formResults[4], // –Ω–∞–π-—Å—Ç–∞—Ä –æ—Ç 5—Ç–µ –º–∞—á–∞
                last_updated: new Date().toISOString()
              });
            
            totalProcessed++;
            console.log(`‚úÖ –û—Ç–±–æ—Ä ${team.id}: —Ñ–æ—Ä–º–∞ = "${formResults.join('')}"`);
            
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–±–æ—Ä–∏—Ç–µ
            await new Promise(resolve => setTimeout(resolve, 1500));
          } catch (teamError) {
            console.warn(`‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞ —Ñ–æ—Ä–º–∞ –∑–∞ –æ—Ç–±–æ—Ä ${team.id}:`, teamError);
            continue;
          }
        }
        
        console.log(`‚úÖ –§–æ—Ä–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤—ä—Ä—à–µ–Ω–∞ –∑–∞ ${teams.length} –æ—Ç–±–æ—Ä–∞`);
      } catch (error) {
        console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞ —Ñ–æ—Ä–º–∞:', error);
      }
    };

    // –ì–ª–∞–≤–Ω–∞ –ª–æ–≥–∏–∫–∞ –∑–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    let competitions: number[] = [];

    if (syncType === 'all' || syncType === 'competitions') {
      competitions = await syncCompetitions();
    } else if (competitionIds) {
      competitions = competitionIds;
    } else {
      // –ê–∫–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–º–µ standings, teams –∏–ª–∏ fixtures, –ø—ä—Ä–≤–æ –≤–∑–µ–º–∞–º–µ —Å–ø–∏—Å—ä–∫–∞ —Å —Ç—É—Ä–Ω–∏—Ä–∏
      console.log('üìã –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å–ø–∏—Å—ä–∫ —Å —Ç—É—Ä–Ω–∏—Ä–∏ –æ—Ç –∫–µ—à–∞...');
      const { data: cachedCompetitions, error } = await supabase
        .from('cached_competitions')
        .select('id')
        .order('id');
      
      if (error || !cachedCompetitions) {
        console.log('‚ö†Ô∏è –ù—è–º–∞ —Ç—É—Ä–Ω–∏—Ä–∏ –≤ –∫–µ—à–∞, –∑–∞—Ä–µ–∂–¥–∞–º–µ –æ—Ç API...');
        competitions = await syncCompetitions();
      } else {
        competitions = cachedCompetitions.map(c => c.id);
        console.log(`üìã –ó–∞—Ä–µ–¥–µ–Ω–∏ ${competitions.length} —Ç—É—Ä–Ω–∏—Ä–∞ –æ—Ç –∫–µ—à–∞`);
      }
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞ H2H –∏ —Ñ–æ—Ä–º–∞ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç—É—Ä–Ω–∏—Ä–∏)
    if (syncType === 'h2h') {
      await syncH2HMatches();
    } else if (syncType === 'team-form') {
      await syncTeamForm();
    } else {
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –∏–∑–±—Ä–∞–Ω–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä–∏
      for (const competitionId of competitions) {
        if (syncType === 'all' || syncType === 'teams') {
          await syncTeamsForCompetition(competitionId);
        }
        
        if (syncType === 'all' || syncType === 'standings') {
          await syncStandingsForCompetition(competitionId);
        }
        
        if (syncType === 'all' || syncType === 'fixtures') {
          await syncFixturesForCompetition(competitionId);
        }

        // –£–≤–µ–ª–∏—á–µ–Ω–∞ –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç—É—Ä–Ω–∏—Ä–∏—Ç–µ –∑–∞ –¥–∞ —Å–ø–∞–∑–≤–∞–º–µ rate limit
        await new Promise(resolve => setTimeout(resolve, 3000)); // 3 —Å–µ–∫—É–Ω–¥–∏ –º–µ–∂–¥—É —Ç—É—Ä–Ω–∏—Ä–∏—Ç–µ
      }
    }

    // –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ sync log –∫–∞—Ç–æ –∑–∞–≤—ä—Ä—à–µ–Ω
    await supabase
      .from('sync_logs')
      .update({
        status: 'completed',
        completed_at: new Date().toISOString(),
        records_processed: totalProcessed
      })
      .eq('id', syncLogId);

    console.log(`üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è—Ç–∞ –∑–∞–≤—ä—Ä—à–∏ —É—Å–ø–µ—à–Ω–æ! –û–±—Ä–∞–±–æ—Ç–µ–Ω–∏ ${totalProcessed} –∑–∞–ø–∏—Å–∞`);

    return new Response(JSON.stringify({
      success: true,
      syncLogId,
      recordsProcessed: totalProcessed,
      competitions: competitions.length
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:', error);

    // –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ sync log –∫–∞—Ç–æ –Ω–µ—É—Å–ø–µ—à–µ–Ω (–∞–∫–æ –µ —Å—ä–∑–¥–∞–¥–µ–Ω)
    try {
      const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
      const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
      const supabase = createClient(supabaseUrl, supabaseServiceKey);
      
      // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ syncLogId —Å—ä—â–µ—Å—Ç–≤—É–≤–∞ –ø—Ä–µ–¥–∏ –¥–∞ –≥–æ –æ–±–Ω–æ–≤–∏–º
      if (typeof syncLogId !== 'undefined') {
        await supabase
          .from('sync_logs')
          .update({
            status: 'failed',
            completed_at: new Date().toISOString(),
            errors: error.message,
            records_processed: totalProcessed
          })
          .eq('id', syncLogId);
      }
    } catch (logError) {
      console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ sync log:', logError);
    }

    return new Response(JSON.stringify({
      error: error.message,
      success: false
    }), {
      status: 500,
      headers: corsHeaders,
    });
  }
});