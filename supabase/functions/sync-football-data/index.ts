import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.53.0';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface ApiCompetition {
  id: number;
  name: string;
  code: string;
  type: string; // –ù–û–íO: LEAGUE, CUP, etc.
  area: {
    name: string;
    code: string;
  };
  emblem: string;
  currentSeason?: {
    currentMatchday: number;
  };
  plan: string;
}

interface ApiTeam {
  id: number;
  name: string;
  shortName: string;
  tla: string;
  crest: string;
  address?: string;
  website?: string;
  founded?: number;
  clubColors?: string;
  venue?: string;
  coach?: { // –ù–û–í–û
    name: string;
    nationality: string;
  };
  leagueRank?: number; // –ù–û–í–û
}

interface ApiStanding {
  position: number;
  team: ApiTeam;
  playedGames: number;
  won: number;
  draw: number;
  lost: number;
  points: number;
  goalsFor: number;
  goalsAgainst: number;
  goalDifference: number;
  form?: string;
}

interface ApiMatch {
  id: number;
  competition: {
    id: number;
  };
  season?: {
    id: number;
  };
  matchday: number;
  stage: string;
  group?: string;
  homeTeam: ApiTeam;
  awayTeam: ApiTeam;
  utcDate: string;
  status: string;
  minute?: number; // –ù–û–í–û
  injuryTime?: number; // –ù–û–í–û
  attendance?: number; // –ù–û–í–û
  score: {
    winner?: string;
    duration?: string;
    fullTime: {
      home?: number;
      away?: number;
    };
  };
  venue?: string;
  referees?: Array<{ name: string; }>;
}

serve(async (req) => {
  console.log('üöÄ Football Data Sync function started');

  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ Supabase –∫–ª–∏–µ–Ω—Ç
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const footballApiKey = Deno.env.get('FOOTBALL_API_KEY');

    if (!footballApiKey) {
      throw new Error('FOOTBALL_API_KEY –Ω–µ –µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–∞–Ω');
    }

    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    // –ü–∞—Ä—Å–∏—Ä–∞–Ω–µ –Ω–∞ –∑–∞—è–≤–∫–∞—Ç–∞
    const { syncType = 'all', competitionIds } = await req.json().catch(() => ({}));

    console.log(`üìä –ó–∞–ø–æ—á–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–∏–ø: ${syncType}`);

    // –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ sync log –∑–∞–ø–∏—Å
    const { data: syncLog, error: syncLogError } = await supabase
      .from('sync_logs')
      .insert({
        sync_type: syncType,
        status: 'running'
      })
      .select()
      .single();

    if (syncLogError) {
      console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ sync log:', syncLogError);
      throw syncLogError;
    }

    const syncLogId = syncLog.id;
    let totalProcessed = 0;

    // Helper —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ API –∑–∞—è–≤–∫–∏
    const makeApiRequest = async (endpoint: string) => {
      console.log(`üåê API –∑–∞—è–≤–∫–∞: ${endpoint}`);
      const response = await fetch(`https://api.football-data.org/v4${endpoint}`, {
        headers: {
          'X-Auth-Token': footballApiKey
        }
      });

      if (!response.ok) {
        throw new Error(`API –≥—Ä–µ—à–∫–∞ ${response.status}: ${response.statusText}`);
      }

      return response.json();
    };

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä–∏
    const syncCompetitions = async () => {
      console.log('üèÜ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä–∏...');
      const data = await makeApiRequest('/competitions');
      const competitions: ApiCompetition[] = data.competitions.filter(
        (comp: ApiCompetition) => comp.plan === 'TIER_ONE'
      );

      for (const comp of competitions) {
        await supabase
          .from('cached_competitions')
          .upsert({
            id: comp.id,
            name: comp.name,
            code: comp.code,
            type: comp.type, // –ù–û–í–û
            area_name: comp.area.name,
            area_code: comp.area.code,
            emblem_url: comp.emblem,
            current_matchday: comp.currentSeason?.currentMatchday || null,
            plan: comp.plan,
            last_updated: new Date().toISOString()
          });
        totalProcessed++;
      }

      console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–Ω–∏ ${competitions.length} —Ç—É—Ä–Ω–∏—Ä–∞`);
      return competitions.map(c => c.id);
    };

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Ç–±–æ—Ä–∏ –∑–∞ –¥–∞–¥–µ–Ω —Ç—É—Ä–Ω–∏—Ä
    const syncTeamsForCompetition = async (competitionId: number) => {
      console.log(`üë• –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –æ—Ç–±–æ—Ä–∏ –∑–∞ —Ç—É—Ä–Ω–∏—Ä ${competitionId}...`);
      try {
        const data = await makeApiRequest(`/competitions/${competitionId}/teams`);
        const teams: ApiTeam[] = data.teams || [];

        for (const team of teams) {
          await supabase
            .from('cached_teams')
            .upsert({
              id: team.id,
              name: team.name,
              short_name: team.shortName,
              tla: team.tla,
              crest_url: team.crest,
              address: team.address,
              website: team.website,
              founded: team.founded,
              club_colors: team.clubColors,
              venue: team.venue,
              coach_name: team.coach?.name, // –ù–û–í–û
              coach_nationality: team.coach?.nationality, // –ù–û–í–û
              league_rank: team.leagueRank, // –ù–û–í–û
              last_updated: new Date().toISOString()
            });
          totalProcessed++;
        }

        console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–Ω–∏ ${teams.length} –æ—Ç–±–æ—Ä–∞ –∑–∞ —Ç—É—Ä–Ω–∏—Ä ${competitionId}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ù–µ –º–æ–∂–∞—Ö –¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–º –æ—Ç–±–æ—Ä–∏—Ç–µ –∑–∞ —Ç—É—Ä–Ω–∏—Ä ${competitionId}:`, error);
      }
    };

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞ –∫–ª–∞—Å–∏—Ä–∞–Ω–∏—è –∑–∞ –¥–∞–¥–µ–Ω —Ç—É—Ä–Ω–∏—Ä
    const syncStandingsForCompetition = async (competitionId: number) => {
      console.log(`üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –∫–ª–∞—Å–∏—Ä–∞–Ω–∏—è –∑–∞ —Ç—É—Ä–Ω–∏—Ä ${competitionId}...`);
      try {
        const data = await makeApiRequest(`/competitions/${competitionId}/standings`);
        
        // –¢—ä—Ä—Å–∏–º TOTAL standings table (–Ω–µ HOME/AWAY), –∑–∞—â–æ—Ç–æ —Å–∞–º–æ —Ç–∞–º –∏–º–∞ form –¥–∞–Ω–Ω–∏
        const totalStanding = data.standings?.find((s: any) => 
          s.type === 'TOTAL' || !s.type || s.stage === 'REGULAR_SEASON'
        );
        const standings: ApiStanding[] = totalStanding?.table || [];

        // –ü—ä—Ä–≤–æ –∏–∑—Ç—Ä–∏–≤–∞–º–µ —Å—Ç–∞—Ä–∏—Ç–µ –∑–∞–ø–∏—Å–∏ –∑–∞ —Ç–æ–∑–∏ —Ç—É—Ä–Ω–∏—Ä
        await supabase
          .from('cached_standings')
          .delete()
          .eq('competition_id', competitionId);

        for (const standing of standings) {
          await supabase
            .from('cached_standings')
            .insert({
              competition_id: competitionId,
              team_id: standing.team.id,
              position: standing.position,
              played_games: standing.playedGames,
              won: standing.won,
              draw: standing.draw,
              lost: standing.lost,
              points: standing.points,
              goals_for: standing.goalsFor,
              goals_against: standing.goalsAgainst,
              goal_difference: standing.goalDifference,
              form: standing.form,
              last_updated: new Date().toISOString()
            });
          totalProcessed++;
        }

        console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–Ω–∏ ${standings.length} –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–ª–∞—Å–∏—Ä–∞–Ω–µ—Ç–æ –∑–∞ —Ç—É—Ä–Ω–∏—Ä ${competitionId}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ù–µ –º–æ–∂–∞—Ö –¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–º –∫–ª–∞—Å–∏—Ä–∞–Ω–µ—Ç–æ –∑–∞ —Ç—É—Ä–Ω–∏—Ä ${competitionId}:`, error);
      }
    };

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞ –º–∞—á–æ–≤–µ –∑–∞ –¥–∞–¥–µ–Ω —Ç—É—Ä–Ω–∏—Ä
    const syncFixturesForCompetition = async (competitionId: number) => {
      console.log(`‚öΩ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –º–∞—á–æ–≤–µ –∑–∞ —Ç—É—Ä–Ω–∏—Ä ${competitionId}...`);
      try {
        const data = await makeApiRequest(`/competitions/${competitionId}/matches`);
        const matches: ApiMatch[] = data.matches || [];

        for (const match of matches) {
          await supabase
            .from('cached_fixtures')
            .upsert({
              id: match.id,
              competition_id: match.competition.id,
              season_id: match.season?.id,
              matchday: match.matchday,
              stage: match.stage,
              group_name: match.group,
              home_team_id: match.homeTeam.id,
              away_team_id: match.awayTeam.id,
              utc_date: match.utcDate,
              status: match.status,
              minute: match.minute, // –ù–û–í–û
              injury_time: match.injuryTime, // –ù–û–í–û
              attendance: match.attendance, // –ù–û–í–û
              home_score: match.score.fullTime.home,
              away_score: match.score.fullTime.away,
              winner: match.score.winner,
              duration: match.score.duration,
              venue: match.venue,
              referee: match.referees?.[0]?.name,
              last_updated: new Date().toISOString()
            });
          totalProcessed++;
        }

        console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–Ω–∏ ${matches.length} –º–∞—á–∞ –∑–∞ —Ç—É—Ä–Ω–∏—Ä ${competitionId}`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ù–µ –º–æ–∂–∞—Ö –¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–º –º–∞—á–æ–≤–µ—Ç–µ –∑–∞ —Ç—É—Ä–Ω–∏—Ä ${competitionId}:`, error);
      }
    };

    // –ì–ª–∞–≤–Ω–∞ –ª–æ–≥–∏–∫–∞ –∑–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    let competitions: number[] = [];

    if (syncType === 'all' || syncType === 'competitions') {
      competitions = await syncCompetitions();
    } else if (competitionIds) {
      competitions = competitionIds;
    } else {
      // –ê–∫–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–º–µ standings, teams –∏–ª–∏ fixtures, –ø—ä—Ä–≤–æ –≤–∑–µ–º–∞–º–µ —Å–ø–∏—Å—ä–∫–∞ —Å —Ç—É—Ä–Ω–∏—Ä–∏
      console.log('üìã –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å–ø–∏—Å—ä–∫ —Å —Ç—É—Ä–Ω–∏—Ä–∏ –æ—Ç –∫–µ—à–∞...');
      const { data: cachedCompetitions, error } = await supabase
        .from('cached_competitions')
        .select('id')
        .order('id');
      
      if (error || !cachedCompetitions) {
        console.log('‚ö†Ô∏è –ù—è–º–∞ —Ç—É—Ä–Ω–∏—Ä–∏ –≤ –∫–µ—à–∞, –∑–∞—Ä–µ–∂–¥–∞–º–µ –æ—Ç API...');
        competitions = await syncCompetitions();
      } else {
        competitions = cachedCompetitions.map(c => c.id);
        console.log(`üìã –ó–∞—Ä–µ–¥–µ–Ω–∏ ${competitions.length} —Ç—É—Ä–Ω–∏—Ä–∞ –æ—Ç –∫–µ—à–∞`);
      }
    }

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –∏–∑–±—Ä–∞–Ω–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä–∏
    for (const competitionId of competitions) {
      if (syncType === 'all' || syncType === 'teams') {
        await syncTeamsForCompetition(competitionId);
      }
      
      if (syncType === 'all' || syncType === 'standings') {
        await syncStandingsForCompetition(competitionId);
      }
      
      if (syncType === 'all' || syncType === 'fixtures') {
        await syncFixturesForCompetition(competitionId);
      }

      // –ù–∞–º–∞–ª–µ–Ω–∞ –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç—É—Ä–Ω–∏—Ä–∏—Ç–µ
      await new Promise(resolve => setTimeout(resolve, 500));
    }

    // –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ sync log –∫–∞—Ç–æ –∑–∞–≤—ä—Ä—à–µ–Ω
    await supabase
      .from('sync_logs')
      .update({
        status: 'completed',
        completed_at: new Date().toISOString(),
        records_processed: totalProcessed
      })
      .eq('id', syncLogId);

    console.log(`üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è—Ç–∞ –∑–∞–≤—ä—Ä—à–∏ —É—Å–ø–µ—à–Ω–æ! –û–±—Ä–∞–±–æ—Ç–µ–Ω–∏ ${totalProcessed} –∑–∞–ø–∏—Å–∞`);

    return new Response(JSON.stringify({
      success: true,
      syncLogId,
      recordsProcessed: totalProcessed,
      competitions: competitions.length
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:', error);

    // –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ sync log –∫–∞—Ç–æ –Ω–µ—É—Å–ø–µ—à–µ–Ω
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    return new Response(JSON.stringify({
      error: error.message,
      success: false
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});